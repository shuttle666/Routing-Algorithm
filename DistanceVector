#!/usr/bin/env python3
import sys

# Neighbor class to store neighbor router and link cost
class Neighbor:
    def __init__(self, neighbor, cost):
        self.neighbor = neighbor
        self.cost = cost

# Graph class to store network topology as adjacency list
class Graph:
    def __init__(self):
        self.net = {}  # Dictionary: {router: [(neighbor, cost), ...]}

    def add_node(self, node):
        """Add a router to the network if not already present."""
        if node not in self.net:
            self.net[node] = []

    def add_edge(self, source, neighbor, weight):
        """Add a bidirectional edge with given weight."""
        if weight != -1:
            self.add_node(source)
            self.add_node(neighbor)
            # Remove existing edge first
            self.net[source] = [n for n in self.net[source] if n.neighbor != neighbor]
            self.net[neighbor] = [n for n in self.net[neighbor] if n.neighbor != source]
            # Add new edge
            self.net[source].append(Neighbor(neighbor, weight))
            self.net[neighbor].append(Neighbor(source, weight))

    def update_edge(self, source, neighbor, weight):
        """Update or remove a bidirectional edge."""
        if weight == -1:
            # Remove edge if exists
            if source in self.net:
                self.net[source] = [n for n in self.net[source] if n.neighbor != neighbor]
            if neighbor in self.net:
                self.net[neighbor] = [n for n in self.net[neighbor] if n.neighbor != source]
            # Remove nodes with no connections
            if source in self.net and len(self.net[source]) == 0:
                del self.net[source]
            if neighbor in self.net and len(self.net[neighbor]) == 0:
                del self.net[neighbor]
        else:
            self.add_edge(source, neighbor, weight)

def print_distance_table(routers, distance_tables, t):
    """Print distance table for each router at time t."""
    for router in routers:
        print(f"Distance Table of router {router} at t={t}:")
        destinations = [r for r in routers if r != router]
        if destinations:
            print("    ", end="")
            for dest in destinations:
                print(f"{dest:5}", end="")
            print()
            for dest in destinations:
                print(f"{dest:5}", end="")
                for via in destinations:
                    cost = distance_tables[router].get((dest, via), float('inf'))
                    cost_str = str(int(cost)) if cost != float('inf') else "INF"
                    print(f"{cost_str:5}", end="")
                print()
        print()

def print_routing_table(routers, routing_tables):
    """Print routing table for each router after convergence."""
    for router in routers:
        print(f"Routing Table of router {router}:")
        destinations = [r for r in routers if r != router]
        for dest in destinations:
            if dest in routing_tables[router]:
                next_hop, cost = routing_tables[router][dest]
                cost_str = str(int(cost)) if cost != float('inf') else "INF"
                next_hop_str = next_hop if next_hop else "INF"
                print(f"{dest},{next_hop_str},{cost_str}")
            else:
                print(f"{dest},INF,INF")
        print()

def distance_vector_algorithm(net, start_t=0):
    """Implement Distance Vector algorithm."""
    routers = sorted(net.net.keys())
    if not routers:
        return
    
    # Initialize distance and routing tables
    distance_tables = {router: {} for router in routers}
    routing_tables = {router: {} for router in routers}
    
    # Initialize with direct neighbor costs
    for router in routers:
        neighbors = {n.neighbor: n.cost for n in net.net[router]}
        for dest in routers:
            if dest != router:
                for via in routers:
                    if via != router:
                        if via in neighbors:
                            if dest == via:
                                distance_tables[router][(dest, via)] = neighbors[via]
                                routing_tables[router][dest] = (via, neighbors[via])
                            else:
                                distance_tables[router][(dest, via)] = float('inf')
                        else:
                            distance_tables[router][(dest, via)] = float('inf')
    
    t = start_t
    max_iterations = 100
    
    while t < max_iterations:
        print_distance_table(routers, distance_tables, t)
        
        # Create new distance tables for this iteration
        new_distance_tables = {router: {} for router in routers}
        changed = False
        
        for router in routers:
            neighbors = {n.neighbor: n.cost for n in net.net[router]}
            for dest in routers:
                if dest != router:
                    min_cost = float('inf')
                    best_via = None
                    for via in routers:
                        if via != router:
                            if via in neighbors:
                                if dest == via:
                                    # Direct connection
                                    new_distance_tables[router][(dest, via)] = neighbors[via]
                                    if neighbors[via] < min_cost:
                                        min_cost = neighbors[via]
                                        best_via = via
                                else:
                                    # Compute cost via neighbor
                                    direct_cost = neighbors[via]
                                    # Get via's best cost to dest from routing table
                                    via_cost = float('inf')
                                    if dest in routing_tables[via]:
                                        via_cost = routing_tables[via][dest][1]
                                    total_cost = direct_cost + via_cost if via_cost != float('inf') else float('inf')
                                    new_distance_tables[router][(dest, via)] = total_cost
                                    if total_cost < min_cost:
                                        min_cost = total_cost
                                        best_via = via
                            else:
                                new_distance_tables[router][(dest, via)] = float('inf')
                    # Update routing table if a better path is found
                    if best_via and min_cost != float('inf'):
                        routing_tables[router][dest] = (best_via, min_cost)
                    elif dest not in routing_tables[router]:
                        routing_tables[router][dest] = (None, float('inf'))
        
        # Check for convergence
        for router in routers:
            for dest in routers:
                if dest != router:
                    for via in routers:
                        if via != router:
                            old_cost = distance_tables[router].get((dest, via), float('inf'))
                            new_cost = new_distance_tables[router].get((dest, via), float('inf'))
                            if old_cost != new_cost:
                                changed = True
        
        distance_tables = new_distance_tables
        t += 1
        if not changed:
            break
    
    print_routing_table(routers, routing_tables)

def main():
    try:
        net = Graph()
        
        # Read router names until START
        while True:
            line = sys.stdin.readline().strip()
            if not line:
                return
            if line == "START":
                break
            net.add_node(line)
        
        # Read initial topology until UPDATE
        while True:
            line = sys.stdin.readline().strip()
            if not line:
                return
            if line == "UPDATE":
                break
            parts = line.split()
            if len(parts) == 3:
                source, neighbor, weight = parts
                weight = int(weight)
                net.add_edge(source, neighbor, weight)
        
        # Run distance vector algorithm for initial topology
        if net.net:
            distance_vector_algorithm(net, start_t=0)
        
        # Read updates until END
        updates = []
        while True:
            line = sys.stdin.readline().strip()
            if not line or line == "END":
                break
            parts = line.split()
            if len(parts) == 3:
                source, neighbor, weight = parts
                weight = int(weight)
                updates.append((source, neighbor, weight))
        
        # Apply updates and run algorithm again if there were updates
        if updates:
            for source, neighbor, weight in updates:
                net.update_edge(source, neighbor, weight)
            print("Updated topology:")
            for router in sorted(net.net.keys()):
                print(f"{router}: {[ (n.neighbor, n.cost) for n in net.net[router] ]}")
            if net.net:
                distance_vector_algorithm(net, start_t=3)
    
    except Exception as e:
        sys.stderr.write(f"Error: {str(e)}\n")
        return

if __name__ == "__main__":
    main()